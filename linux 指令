------------------------------------------------------------
rpm qa |grep java 查看rpm java相关安装包
rpm -e --nodeps jdk-1.7-ie787897  卸载rpm
rpm -ivh  xxxx.rpm  安装rpm
配置jdk环境变量
① vi /etc/profile
② 在末尾行添加
	#set java environment
	JAVA_HOME=/usr/local/jdk/jdk1.7.0_71
	CLASSPATH=.:$JAVA_HOME/lib.tools.jar
	PATH=$JAVA_HOME/bin:$PATH
	export JAVA_HOME CLASSPATH PATH


mysql 
1、rpm 安装服务rpm 客户端rpm  
2、serive mysql start
3、设置root 用户
4、授权grant all privileges on *.* to 'root' @'%' identified by 'root';
flush privileges;
5、开启3306端口

--------------------------------------------------------------
yum list installed ----------列出yum  安装清单
yum  remove xxxxxx

systemctl start docker.service 加入服务 service docker start（centos6命令）
service iptables start
vim etc/sysconfig/iptables
iptables -l
reboot


-----------------docker  常用指令----------------
docker ps -a


docker build -t  images:1.0.1 .
挂载外部配置文件
docker run -d --name gisjava -v /opt/market/configs/gisjava/ :/configs/ -p 8003:8003 gisjava:1.0.1
docker  run  -d  --name mytomcat -v /usr/local/webapps/  /usr/local/tomcat/webapps  -p  9080:9080  tomcat:7
(直接把war包拷贝到外部的时候就可以使用)

docker  logs -tail=1000 container_id
docker exec -it container_id /bin/bash

docker commit  contaier_id  imagename:tag  //可以报现在在运行的容器保存成镜像
docker  save -o imagename.tar  image_id //保存原镜像
docker  load  -i  /usr/local/imagename.tar //恢复镜像
docker  pull registry  //拉取docker 私有仓库镜像   
第1步：修改配置让docker 信任这个ip和端口的私服 
第2步：docker tag  imageid 192.168.1.1:5000/imagename 把需要上传的镜像 打成私服标签
第3步：docker push imagesid 192.168.1.1:5000/imagename

dockerfile:
from 10.5.50.132:10000/java
workdir /GneecCommonGisJa/
copy GneecCommonGisJa.jar  /GneecCommonGisJa/GneecCommonGisJa.jar    //add 会自动解压
cmd ["java" "-Xmx1g","-Djava.security.egd=file:/dev/./jread'on","-jar","GneecCommonGisJa.jar",
"--spring.config.location=file:/configs/application.yml"]

------------------------------------------------------------------------------------------------------------------------


docker gitlab 邮箱配置：
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_address'] = "smtp.qq.com"
gitlab_rails['smtp_port'] = 465
gitlab_rails['smtp_user_name'] = "344630476@qq.com"
gitlab_rails['smtp_password'] = "jqnvbofdkckibihh"
gitlab_rails['smtp_authentication'] = "login"
gitlab_rails['smtp_enable_starttls_auto'] = true
gitlab_rails['smtp_tls'] = true
gitlab_rails['gitlab_email_from'] = '344630476@qq.com'
user["git_user_email"] = "344630476@qq.com"

修改配置
docker exec -it gitlab vi /etc/gitlab/gitlab.rb
--------------------------------------------------------------
docker 用户 无法克隆 无法push   提示权限  （git.bash 必须以管理员的身份运行）
用一条指令 重置下
git config --system --unset credential.helper


-----------------------------------------------------------
git branch -a  查看所有
git fetch  重新获取 （当远程分支不全的时候）

git branch -d dengdeng 删除本地分支

1、git  checkout -b  chouchou 新建本地分支（会从当前分支创建 比如git clone dev 分支到本地 会以本地dev 创建 本地 chouchou）
2、修改完后git  push -u origin chouchou 提交到自己的分支
3、请求合并到dev
4、每天从git pull origin dev  拉取代码到本地  如果有冲突 本地解决


git 忽略文件清单
/target/
/.classpath
/.settings/
/.gitignore
/.project
解决gitignore 不起作用
git rm -r --cached .  
git add .
git commit -m "update gitignore"

git  本地提交后 拉取git pull origin dev 提示reject non-fast-faward 
1、重置提交 git  reset head^
2、git stash 
3、git pull origin dev:dengdeng
4、git  stash  pop
5、 git commit
6、git push origin dengdeng
7、 请求合并

---------------------------------------------------------------------------------------maven 跳过测试---------------
clean package DskipTests

